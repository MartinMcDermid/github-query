---
name: Release

on:
  push:
    branches: [main]
    paths-ignore:
      - 'CHANGELOG.md'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: "${{ !contains(github.event.head_commit.message, 'chore: release') }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Release (Auto)
        if: github.event_name == 'push'
        run: npm run release:patch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Release (Manual)
        if: github.event_name == 'workflow_dispatch'
        run: npm run release:${{ github.event.inputs.release_type }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            core.setOutput('release_id', release.id);
            core.setOutput('release_tag', release.tag_name);
            core.setOutput('release_url', release.html_url);

            console.log(`Released version ${release.tag_name}`);
            console.log(`Release URL: ${release.html_url}`);

  # Future: npm publish job (when ready)
  # publish:
  #   name: Publish to NPM
  #   runs-on: ubuntu-latest
  #   needs: release
  #   if: success() && !contains(github.event.head_commit.message, 'prerelease')
  #
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '20.x'
  #       cache: 'npm'
  #       registry-url: 'https://registry.npmjs.org'
  #
  #   - name: Install dependencies
  #     run: npm ci
  #
  #   - name: Publish to NPM
  #     run: npm publish --access public
  #     env:
  #       NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
